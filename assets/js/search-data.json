{
  
    
        "post0": {
            "title": "Romero to Cold Spring",
            "content": "Romero to Cold Spring . Today my buddy Tom Quisel and I rode Romero Trail up to East Camino Cielo and across to Cold Spring Trail. It’s a fanastic ride: a solid tempo climb up to the ridge line graced with unbelievable views of the Santa Barbara coastline south, followed by a tech descent back into town. The ride reminded me of the all day epics I used to do as a grom in the Cleveland National Forest. Unfortunately, I didn’t get any photos during the ride. Too bad, because it was a stunner. . Following the ride I had a few minutes to map out the route on Cal Topo. If you haven’t checked it out, it’s an extremely cool backcountry mapping tool. Below are a few stats from the ride, as well as the topo itself. I’m curious how Cal Topo defines the “land cover merics”, as 59% of he ride being designated as “Developed” seems dubious by my definition. The slope angle percentages also are suprisingly steep. I’d like to ge my hands on the raw latitude, longitude, and elevation time series so I can corroborate some of these metrics myself. Alas, a project for another day. . A few stats from the ride. . The Topo (check out the link above) .",
            "url": "https://bradshawben.github.io/lostboyben/adventure/2020/02/09/coldsprings.html",
            "relUrl": "/adventure/2020/02/09/coldsprings.html",
            "date": " • Feb 9, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Exploring the Karplus Strong Algorithm",
            "content": "I have recently been exposed to more problems where an in depth understanding of signal processing and spectral analysis would be extremely valuable. These problems include constructing mobility endpoints from high frequency wrist worn accelerometer data, deriving RR-intervals from raw PPG waveform signals, and audio analysis work for speech related biomarker development. . This blog post explores the Karplus Strong Algorithm which is a method of constructing signals that sound like stringed instruments. It&#39;s a nice example of some simple DSP techniques applied to sound data that generate realistic sounding signals. Hopefully you will find it interesting. . As I wrote this blog post I pulled ideas from the following sources: . The original Karplus-Strong paper: Digital Synthesis of Plucked-String and Drum Timbres | I also borrowed heavily from this excellent blog | And also this excellent blog | I also used some information from the Coursera DSP Course | A quick refresher on recursive signals . The Karplus Strong Algorithm has some recursive elements, so it&#39;s worthwhile refreshing some of the details on recursive signals. . Suppose we have the following signal: $$y[n] = alpha y[n-k] + bar x[n]$$ . Note that the signal is recursive, e.g. $y[n]$ is a function of past lagged values of itself. Let&#39;s choose a few concrete parameters and play with this signal sequence. Let: . $ alpha = 0.7$ | $ bar x[n] = delta [n]$ where $ delta [n]$ is the unit impulse function, also known as the Dirac-delta function | . Let&#39;s code this up in order to analyze this signal. . import numpy as np import matplotlib.pyplot as plt import seaborn as sns %matplotlib inline . index = np.arange(-100, 100) delta = np.zeros(len(index)) delta[index==0] = 1 . plt.stem(index, delta, use_line_collection=True) plt.tight_layout() sns.despine() . def y(n, k, alpha, x): &quot;&quot;&quot;Generate a recursive signal y from a fixed length signal x, a lag k, and a decay factor alpha.&quot;&quot;&quot; i = 0 yn = np.array(x[n==0]) for i in range(n[-1]): if i - k &lt; 0: y_lag = 0 else: y_lag = yn[i-k] yi = np.array([alpha*y_lag + x[i]]) yn = np.concatenate([yn, yi]) return yn . fig = plt.figure(figsize=(16, 4)) for i, alpha in enumerate([1, 0.8, 0.9, 1.2]): ax = fig.add_subplot(2, 2, i+1) yn = y(index, 3, alpha, delta) ax.stem(index[index&gt;=0], yn, use_line_collection=True) ax.title.set_text(&#39;$ alpha$ = {}&#39;.format(alpha)) plt.tight_layout() sns.despine() . We can see that the recursive sequence results in a period signal, where the $ alpha$ parameter controls the decay of the signal towards zero. That&#39;s a curious phenomenon, given that the only nonzero portion of the input signal $ bar x[n]$ is at $n=0$. . Building a basic music synthesizer . Let&#39;s move on to building a few sounds using the mathematical model we outlined above. One way of creating a music synthesizer is a concept known as wave table synthesis. The general idea is that we can produce a wave table, which is a periodic wave form in its sample representation (e.g. an array of values corresponding the one period of the signal), and we can loop through this waveform at different speeds to get different wave forms. Let&#39;s build a basic synthesizer function. . from IPython.display import display, Audio . def synthesize(sampling_rate, wave_table, n_samples): &quot;&quot;&quot;Construct a new waveform using a repeating periodic wave table. Source: https://flothesof.github.io/Karplus-Strong-algorithm-Python.html, with some modifications. &quot;&quot;&quot; sample = np.zeros(n_samples) si = 0 for i in range(n_samples): si += sampling_rate si = si % wave_table.size sample[i] = wave_table[si] si += 1 return sample . fs = 8000 t = np.linspace(0, 1, num=fs) wavetable = np.sin(np.sin(2 * np.pi * t)) plt.plot(wavetable) plt.title(&#39;Wavetable&#39;) plt.xlabel(&#39;Sample number&#39;) plt.tight_layout() sns.despine() . fig = plt.figure(figsize=(16, 6)) sampling_speeds = [110, 220, 440, 880] for i, f in enumerate(sampling_speeds): sample = synthesize(f, wavetable, 2*fs) ax = fig.add_subplot(2, 2, i+1) ax.plot(sample[:500]) ax.title.set_text(&#39;Synthesized Signal: Sampling Rate: {}&#39;.format(f)) display(Audio(sample, rate=fs)) plt.tight_layout() sns.despine() . Your browser does not support the audio element. Your browser does not support the audio element. Your browser does not support the audio element. Your browser does not support the audio element. You can see that as we double the sampling speed/rate, the period of the synthesized waveform is cut in half. Also, listening to the sounds you can tell that the pitch increases by an octave. While this is a nice exercise, it isn&#39;t a nice sound. We can explore other wave tables as well including the triangular wave, square wave, and the sawtooth wave. . import scipy.signal as signal . N = 110 t = np.linspace(0, 1, N) sawtooth_wt = signal.sawtooth(2 * np.pi * t) triangular_wt = signal.triang(N) square_wt = signal.square(2 * np.pi * t) . sample = synthesize(f, sawtooth_wt, 2*fs) plt.plot(sawtooth_wt[:N]) plt.title(&#39;Sawtooth wavetable&#39;) plt.xlabel(&#39;Sample Number&#39;) Audio(sample, rate=fs) . Your browser does not support the audio element. sample = synthesize(f, triangular_wt, 2*fs) plt.plot(triangular_wt[:N]) plt.title(&#39;Triangular wavetable&#39;) plt.xlabel(&#39;Sample Number&#39;) Audio(sample, rate=fs) . Your browser does not support the audio element. sample = synthesize(f, square_wt, 2*fs) plt.plot(square_wt[:N]) plt.title(&#39;Square wavetable&#39;) plt.xlabel(&#39;Sample Number&#39;) Audio(sample, rate=fs) . Your browser does not support the audio element. The waveforms are interesting and distinctly different, but sound terrible. Natural sounds vary over time, and aren&#39;t purely periodic. Enter the Karplus Strong algorithm. . The Karplus Strong Algorithm . The original Karplus Strong &quot;plucked string&quot; algorithm has the following implementation: . $$Y_{t} = frac{1}{2}[Y_{t-p} + Y_{t-p-1}]$$ . Essentially it&#39;s a simple recursion formula where successive values of $Y$ are averaged together. This averaging results in a decay of the signal. . def karplus_strong(wavetable, n_samples): &quot;&quot;&quot; Synthesizes a new waveform from an existing wavetable, modifies last sample by averaging. Source: https://flothesof.github.io/Karplus-Strong-algorithm-Python.html, with some modifications. &quot;&quot;&quot; samples = [] current_sample = 0 previous_value = 0 wavetable = wavetable.copy() while len(samples) &lt; n_samples: wavetable[current_sample] = 0.5 * (wavetable[current_sample] + previous_value) samples.append(wavetable[current_sample]) previous_value = samples[-1] current_sample += 1 current_sample = current_sample % wavetable.size return np.array(samples) . sample = karplus_strong(square_wt, 2*fs) plt.plot(sample) plt.xlabel(&#39;Sample Number&#39;); . for wt in [square_wt, sawtooth_wt, triangular_wt]: sample = karplus_strong(wt, 2*fs) display(Audio(sample, rate=fs)) . Your browser does not support the audio element. Your browser does not support the audio element. Your browser does not support the audio element. This is a significantly more interesting sound already! The original paper suggest using a wave table of random values drawn from the set {-1, 1} to initialize the algorithm. . wavetable_size = fs // 55 wavetable = np.random.choice([-1, 1], wavetable_size).astype(np.float32) . plt.plot(wavetable) plt.tight_layout() sns.despine() . sample = karplus_strong(wavetable, 2 * fs) . Audio(sample, rate=fs) . Your browser does not support the audio element. Sounds like a guitar string being plucked! Very cool. The paper describes various extensions to the algorithm, including a modification that makes drum like noises. Additionally, these constructed signals can be overlayed to make realistic sounding guitar riffs. .",
            "url": "https://bradshawben.github.io/lostboyben/2020/02/07/Karplus-Strong.html",
            "relUrl": "/2020/02/07/Karplus-Strong.html",
            "date": " • Feb 7, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "January 2020 Road Trip",
            "content": "January 2020 Road Trip . Cait and I recently took a two week road trip across the mountain west. We spent a lot of time resort riding, splitboarding, hanging with good friends, and eating great food. It was great to get back into the mountains and get the riding legs back under me after a solid fall of primarily paddling around the ocean. Interspersed throughout the trip Cait interviewed at various places including Santa Cruz, Denver, Silverthorne, and Durango. Full spectrum family physicians in rural locations are in high demand! . Below are a few stats and photos from our trip. . Trip Statistics . Miles driven: 3640 | States passed through: 5 (CA, NV, UT, CO, AZ) | Interviews attended (Cait): 4 | Days riding at Squaw Valley: 1 | Days riding at Snowbird: 1 | Days riding at Winter Park: 1 | Days riding at Wolf Creek: 2 | Days riding at Copper: 1 | Days riding at Steamboat: 2 | Days touring: 3 | . A few photos . Changing over on the top of Bald Mountain . As good as touring gets in January: low angle buffed powder. . The gals headed up. .",
            "url": "https://bradshawben.github.io/lostboyben/adventure/2020/01/27/colorado-trip.html",
            "relUrl": "/adventure/2020/01/27/colorado-trip.html",
            "date": " • Jan 27, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Vogelfrei",
            "content": "Vogelfrei . Recently, my sweet grandmother passed away. She was a strong woman of faith, and I will miss her. I wrote the piece below for her memorial. . My first memory of Oma was from her house in Glendora, close to 30 years ago. More specifically I remember the view from her upstairs bedroom. Sitting between her and Opa, the morning sunlight cascading through the open window, scattered by the water in the pool below. I remember the smell of fresh coffee and the utterly bequem comforter that wrapped around us, a luxury Oma’s bed was never without. I remember the tone of the conversation, and her intense interest in what I had to say. I have no recollection of what we talked about, but I remember enjoying our conversation greatly. . A man reflecting on his boyhood is left to sift through an expansive sea of feelings, smells, and still frame images. Growing up on the ranch I remember the scent of dusty red sunsets, I remember sitting with brothers deep in a field under a crisp black sky, feeling small and full of wonder. And amidst all of those memories and smells, those sunsets and those hot dusty days are scattered so many memories with Oma. . I remember her watering her driveway each afternoon in the summer as I rode by on my bike, always smiling and waving. I remember harvesting the fruit in the orchard under her direction, sampling apples, apricots, almonds, indiscriminately. Knowing that as good as the raw fruit was, it couldn’t compare the crumble it would eventually become. I remember Oma sampling the homemade “apricot wine” my brothers and I had made by stomping apricots with our raw and probably unwashed feet, mixing in bread yeast, fingers crossed. She took a sip, smiled and exclaimed, “Not bad!”. I remember the vole she squeezed out of a still wriggling, recently headless rattlesnake. She squeezed it out of the snake like a child might squeeze a popsicle out of its wrapping, and with the same excitement. That woman had some guts. I remember watching her sit and hold a conversation with a beautiful girl fifty years her junior during a square dancing party. They sat and they talked for an hour, utterly captivated in conversation with the bright lights of the dance floor cascading into the dusk. I knew that if Oma found someone interesting, that person must be someone special indeed. That beautiful girl would later become my wife. I remember, I remember, I remember. . Thirty years later I found myself again at Oma’s bed. It wasn’t the same physical bed or the same house. It was a metal hospice bed that lowered and reclined and was designed to make comfortable that last stretch of this life’s journey as our bodies start to die. But the comforter, and the conversation, the intense interest in what I had to say, that was all the same. Again I found myself between Oma and Opa, with morning sunlight streaming through an open window. I found myself again in that same place of olfactory bliss as the scent of coffee and newly opened flowers wrapped around us. And in that moment I knew this would be the last time I would see my sweet Oma. I would say goodbye in much the same way that I first said hello. And I knew that upon leaving, all those memories would remain to guide me on my own path from where I started back to where I began. Those memories would instruct me in how to live with a wild sacrificial servant’s heart, how to live in grace and faith. How to live with guts. And what a gift that is. .",
            "url": "https://bradshawben.github.io/lostboyben/family/2020/01/19/oma.html",
            "relUrl": "/family/2020/01/19/oma.html",
            "date": " • Jan 19, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": ". My name is Ben Bradshaw. I am a researcher, developer, writer, and adventurer, but not necessarily in that order. I enjoy applying technology (particularly in the form of software) in order to make the world a better place. Over the course of my career I have worked as a microeconomics research associate at the San Francisco Federal Reserve, a high school math teacher with Teach for America, and a data scientist at Guild Education. Currently, I am a lead data scientist at Evidation Health where I lead a team of data scientists and engineers to support analytics infrastructure and R&amp;D supporting core business functions. In a previous life, I also was a member of the US National Cycling Team. . I value balance and breadth of experience in my life. My passion for cycling, surfing, climbing, snowboarding, and guitar are important channels that provide these experiences. I’m married to an incredible woman named Caitlin, who is a family medicine doctor. We currently live in Denver, Colorado. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://bradshawben.github.io/lostboyben/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://bradshawben.github.io/lostboyben/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}